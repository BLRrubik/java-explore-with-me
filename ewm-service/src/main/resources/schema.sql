ALTER TABLE if EXISTS events DROP CONSTRAINT if EXISTS fk_category_event;
ALTER TABLE if EXISTS events DROP CONSTRAINT if EXISTS fk_initiator_event;
ALTER TABLE if EXISTS compilation_event DROP CONSTRAINT if EXISTS fk_compilation_event_event;
ALTER TABLE if EXISTS compilation_event DROP CONSTRAINT if EXISTS fk_compilation_event_compilation;
ALTER TABLE if EXISTS requests DROP CONSTRAINT if EXISTS fk_request_event;
ALTER TABLE if EXISTS requests DROP CONSTRAINT if EXISTS fk_request_requester;


DROP TABLE if EXISTS categories CASCADE ;
DROP TABLE if EXISTS users CASCADE ;
DROP TABLE if EXISTS events CASCADE ;
DROP TABLE if EXISTS requests CASCADE ;
DROP TABLE if EXISTS compilations CASCADE ;
DROP TABLE if EXISTS compilation_event CASCADE ;

CREATE TABLE categories (
                            category_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                            name varchar(255) NOT NULL UNIQUE,
                            PRIMARY KEY (category_id)
);

CREATE TABLE users (
                       user_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
                       email varchar(255) NOT NULL UNIQUE ,
                       name varchar(255) NOT NULL ,
                       is_active boolean NOT NULL DEFAULT false,
                       PRIMARY KEY (user_id)
);

CREATE TABLE requests (
                          request_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
                          created timestamp NOT NULL ,
                          status varchar(255) NOT NULL ,
                          event_id bigint NOT NULL ,
                          requester bigint NOT NULL ,
                          PRIMARY KEY (request_id)
);

CREATE TABLE events (
                        event_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
                        title varchar NOT NULL ,
                        description varchar(1024) NOT NULL ,
                        annotation varchar(1024) NOT NULL ,
                        created_on timestamp NOT NULL ,
                        event_date timestamp NOT NULL ,
                        published_on timestamp ,
                        paid boolean NOT NULL ,
                        longitude float NOT NULL ,
                        latitude float NOT NULL ,
                        state varchar(255) NOT NULL ,
                        request_moderation boolean NOT NULL DEFAULT true ,
                        participant_limit int NOT NULL DEFAULT 0 ,
                        category_id bigint NOT NULL ,
                        initiator bigint NOT NULL ,
                        PRIMARY KEY (event_id)
);

CREATE TABLE compilations(
                             compilation_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ,
                             title varchar(255) NOT NULL ,
                             pinned boolean NOT NULL DEFAULT false ,
                             PRIMARY KEY (compilation_id)
);

CREATE TABLE compilation_event(
                                  event_id bigint NOT NULL ,
                                  compilation_id bigint NOT NULL ,
                                  PRIMARY KEY (event_id, compilation_id)
);

CREATE INDEX if NOT EXISTS idx_events_date
    ON events(event_date);

CREATE INDEX if NOT EXISTS idx_events_initiator
    ON events(initiator);

CREATE INDEX if NOT EXISTS idx_events_paid
    ON events(paid);

CREATE INDEX if NOT EXISTS idx_events_state
    ON events(state);


ALTER TABLE if EXISTS events ADD CONSTRAINT fk_category_event FOREIGN KEY (category_id)
    REFERENCES categories(category_id);
ALTER TABLE if EXISTS events ADD CONSTRAINT fk_initiator_event FOREIGN KEY (initiator)
    REFERENCES users(user_id);

ALTER TABLE if EXISTS requests ADD CONSTRAINT fk_request_event FOREIGN KEY (event_id)
    REFERENCES events(event_id);
ALTER TABLE if EXISTS requests ADD CONSTRAINT fk_request_requester FOREIGN KEY (requester)
    REFERENCES users(user_id);

ALTER TABLE if EXISTS compilation_event ADD CONSTRAINT fk_compilation_event_event
    FOREIGN KEY (event_id) REFERENCES events(event_id);

ALTER TABLE if EXISTS compilation_event ADD CONSTRAINT fk_compilation_event_compilation
    FOREIGN KEY (compilation_id) REFERENCES compilations(compilation_id);